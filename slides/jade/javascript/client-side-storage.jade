section
  h2 Client-Side Storage
  ul
    li <b>IndexedDB API:</b> Structured data storage
    li <b>LocalStorage:</b> Key-value storage
    li <b>File API:</b> Manipulate local files from the browser

section
  mixin browserSupport('19+', '12+', 'No', '10+', 'No')
  h2 IndexedDB
  ul
    li <b>Unlimited storage</b>
    li <b>Query capabilities</b>
    li <b>Very limited</b> browser support

section
  mixin browserSupport('19+', '12+', 'No', '10+', 'No')
  h2 IndexedDB
  pre
    code.
      myDatabase.indexedDB.addTodo = function(friendText) {
        var db = myDatabase.indexedDB.db;
        var trans = db.transaction(["friend"], IDBTransaction.READ_WRITE, 0);
        var store = trans.objectStore("friend");
        var request = store.put({
          "text": friendText,
          "timeStamp" : new Date().getTime()
        });

        request.onsuccess = function(e) {
          // Re-render all the friend's
          myDatabase.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.log(e.value);
        };
      };

section
  h2 IDBWrapper.js
  pre
    code.
      var myDB = new IDBStore({
        dbName: 'myDB',
        storeName: 'friend'
      });

      //Add a new entry
      var onsuccess = function (id) {
        ...
      }

      var onerror = function (id) {
        ...
      }

      friends.put({ name: 'James' }, onsuccess, onerror)

section
  h2 IDBWrapper.js
  p Methods
  pre
    code.
      // Add new entry
      friends.put(friend, onsuccess, onerror)

      // Query an entry
      friends.get(friendId, onsuccess, onerror)

      // Updating an entry
      friends.update(updatedFriend, onsuccess, onerror)

      // Get all entries
      friends.getAll(onsuccess, onerror)

      // Delete an entry
      friends.remove(friendId, onsuccess, onerror)

section
  mixin browserSupport('13+', '3.6+', '5.1*', '10?', '11.1+')
  h2 File APIs
  p Get file attributes

  pre
    code.
      #{'<input type="file" id="yourFile" name="file"/>'}
      #{'<output id="list"></output>'}

      #{'<script>'}
        function handleFileSelect(evt) {
          var file = evt.target.files[0];

          $('<p>' + file.name + ' - ' + file.size + ' bytes.' + '</p>').appendTo('#list');
        }

        $('#yourFile').on('change', handleFileSelect);
      #{'</script>'}

section
  h2 FileReader
  p Manipulate file contents

  pre
    code.
        function handleFileSelect(evt) {
          var file = evt.target.files[0],
            reader = new FileReader();

          reader.onload = function (e) {
            $('<img>')
          .attr('src', e.target.result)
          .attr('title', file.name)
          .appendTo('#list');
          }

          reader.readAsDataURL(file); // Read in the image file as a data URL.
        }

section
  mixin browserSupport('4+', '3.5+', '4+', '8+', '10.5+')
  h2 Web Storage
  ul
    li <b>Great</b> browser support (plus fallbacks)
    li <b>localStorage</b>: persists contents
    li <b>sessionStorage</b>: contents are lost after browser session
  img(src="assets/svg/web-storage.svg", width="200")

section
  h2 localStorage
  p Global object used to store strings

  pre
    code.
      // Set data
      localStorage<b>.setItem</b>("key", "value");

      // Get data
      localStorage<b>.getItem</b>("key"); // => "value"

      // Remove data
      localStorage<b>.removeData</b>("key");

      // Number of entries
      localStorage<b>.length</b>

section
  h2 store.js
  ul
    li <b>JSON datatypes</b> (objects, arrays, boolean...)
    li <b>Default values</b>
    li <b>Fallback</b> to
    ul
      li <b>globalStorage</b> for older Firefox (2+)
      li <b>userData</b> for older IE (5+)


section
  h2 store.js
  pre
    code.
      var myStuff = new Store("myStuff");

      // Set data
      myStuff.set('key', 'value')

      // Get data
      myStuff.get('key')

      // Remove data
      myStuff.remove('key');


section(data-state="lab")
  h2 Lab: localstorage
  p Use the store.js library