extend includes/layout

append title
  title Performance

append slides
  section
    h1 Performance

  section
    h2 Performance
    ul.read-block
      li <b>.1 to 1 sec:</b> no feedback necessary
      li <b>1 to 10 sec:</b> add some feedback (spinners)
      li <b>> 10 sec:</b> the user is no longer here

  section
    h2 Impact on revenue
    ul.read-block
      li Google: +500 ms <b>-20% traffic</b>
      li Yahoo: +400 ms    <b>-5-9% full-page traffic</b>
      li Amazon: +100 ms <b>-1% sales</b>
      li Firefox: +2 seg   <b>-15% downloads</b>

  section
    h2 Impact on PageRank
    p Starting 2010, <b>Google has added page performance</b> to the PageRank algorithm
    a(href="http://googlewebmastercentral.blogspot.com/2010/04/using-site-speed-in-web-search-ranking.html").source Using site speed in web search ranking

  section
    h2 Best thing for performance
    p Aim for simplicity

  section
    h2 image

  section
    h2 Improve performance
    p by following <b>14 rules</b> by Steve Souders

  section
    h2 Pre-process JavaScript and CSS
    ul
      li Rule 1 - Make <b>Fewer HTTP Requests</b>
      li Rule 2 - Use a <b>Content Delivery Network</b>
      li Rule 4 - <b>Gzip Components</b>
      li Rule 10 - <b>Minify JavaScript</b>

  section
    h2 Content-delivery network
    p.read-block Use a third-party CDN
    pre
      code.
        https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js
    p.read-block Create your own CDN

  section
    h2 Active open connections
    p <b>6 connections</b>
    p These are <b>shared for all active tabs</b>

  section
    h2 Location
    ul
      li Rule 5 - Put <b>Stylesheets at the Top</b>
      li Rule 6 - Put <b>Scripts at the Bottom</b>
      li Rule 8 - Make <b>JavaScript and CSS External</b>

  section
    h2 Measure, don't guess
    p What's faster, Facebook or LinkedIn?

  section
    h2 Measure, don't guess

  section(data-state="lab")
    h2 Lab: performance 1
    p Compare performance of multiple websites using online tools

  section
    h2 Performance tools
    ul
      li Google PageSpeed
      li YSlow!
      li Webpagetest.org
      li Chrome resources tab

  section
    h2 Some stats
    ul
      li Extracted from http://httparchive.org/
      li +17000 URLs analyzed:
        ul
          li Alexa 500, US 500, 10,000
          li Fortune 500
          li Global 500
          li Quantcast10K

  section
    h2 Load times

  section
    h2 Resource size

  section
    h2 Resource size
    ul
      li Lossy JPG compression
      li Lossless image compressors

  section
    h2 External resources

  section
    h2 PageSpeed score

  section(data-state="lab")
    h2 Lab: performance 2
    p Track performance with PageSpeed

  section
    h2 Efficient CSS
    p.read-block CSS rules are evaluated <b>right to left</b>

    p(style="margin-top: 60px;") First a.home, then upwards
    pre
      code.
        ul > li a.home {
          ...
        }

  section
    h2 Selector performance
    p Best to worst
    ul.read-block
      li #id
      li .class
      li div
      li *

  section
    h2 Improve performance
    .row-fluid
      .span6
        p BAD:
        pre
          code.
            /* avoid generic selectors */
            * {
              font-size: 12px;
            }
            /* do not tag-qualify an id */  div#main {
              width: 960px;
            }
            /* avoid descendants */
            table.bill tbody tr td.cell {
              border: 1px solid #ccc;
            }
            /* avoid by tag */
            .contact-data div {
              background: #fcc;
            }
      .span6
        p GOOD:
        pre
          code.
            body {
              font-size: 12px;
            }

            #main {
              width: 960px;
            }

            .cell, .td-cell {
              border: 1px solid #ccc;
            }

            .contact-data, .div-contact-data {
              background: #fcc;
            }

  section
    h2 Improve more
    .row-fluid
      .span4
        p BAD:
        pre
          code.
            ul.links li a {
              color: #ccc;
            }
      .span4
        p BETTER:
        pre
          code.
            .links > li > a {
              color: #ccc;
            }
      .span4
        p BEST:
        pre
          code.
            .a-link {
              color: #ccc;
            }

  section
    h2 Avoid sibling selectors
    pre
      code.
        h1 + p {
          border: 1px solid #fff;
        }
    p.small-text.read-block WebKit typically achieves a 75% memory reduction in style footprint on pages that <b>don’t make use of sibling selectors</b> – Dave Hyatt, (webkit architect) May 2008

  section
    h2 Avoid :hover on non-link
    p.read-block :hover on non-link elements (div, p, etc) <b>will fail or cause degraded performance</b> on IE

  section
    h2 Best performance possible
    ul
      li <b>ID and class selectors</b>
      li <b>child selectors</b>
      li <b>descendant selectors</b>

  section
    h2 Not to be taken too seriously
    p Performance gains are not that good.
    ul
      li 30 ms for typical CSS
      li 2000 ms for really bad CSS

  section
    h2 Use classes to override styles
    p Specificity has collisions
    #priority-collisions
      style
        #priority-collisions {
          -webkit-transform: scale(0.7, 0.7);
        }
        #priority-collisions p {
          margin-top: 70px;
        }
      .row-fluid
        .span5
          p h3
        .span7
          mixin priorities(0, 0, 0, 1)
      .row-fluid
        .span5
          p #sidebar h3 { ... }
        .span7
          mixin priorities(0, 1, 0, 1)
      .row-fluid
        .span5
          p(style="font-size: 90%;") #sidebar .account h3 { ... }
        .span7
          mixin priorities(0, 1, 1, 1)
  a(href="http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us").source Source: Nicole Sullivan
  section
    h2 !important
    p Duplicates the problem
    .row-fluid
      .span5
          p(style="margin-top: 70px") Normal styles
      .span7
          mixin priorities(' ', ' ', ' ', ' ')
    .row-fluid
      .span5
          p(style="margin-top: 70px") Important styles
      .span7
          mixin priorities('×', ' ', ' ', ' ')
  section
    h2 CSS Lint
    p CSS Lint analyzes your CSS and tries to help point out problems with your code.
    ul
      li Parsing errors
      li Possible Errors
      li Compatibility
      li Performance
      li Maintainability & Duplication

  section(data-state="lab")
    h2 Lab: CSS Lint
    p Use CSS Lint to optimize css code

  section
    h2 Reflow performance
    p.read-block Specify <b>width</b> and <b>height</b> on all your images
    p.read-block Apply animations to elements that are <b>position fixed</b> or <b>absolute</b>

  section
    h2 Browser cache
    p.read-block <b>304</b> (Not Modified) responses
    p.read-block <b>Expires</b> headers
    p.read-block <b>Strong</b> and <b>weak</b> cache indicators

  section
    h2 304
    p.read-block Means "the browser already has the latest version of this file"
    p.read-block Will happen with every click <b>unless Expires is used</b>


  section
    h2 304 with Last-Modified
    p.read-block If the server includes <b>Last-Modified</b> the browser will include <b>If-Modified-Since</b> with each further request
    p Example: any static file with apache / tomcat

  section
    h2 304 with ETag
    p.read-block If server includes <b>ETag</b> the browser will include <b>If-None-Match</b> with each further request
    p Example: <inode>-<file-size>-<last-modified> with apache

  section
    h2 Expires header
    p Indicates for <b>how long the file should not be retrieved again</b>.

  section
    h2 Expires header
    ul
      li Cache-control (max-age)
        ul
          li HTTP 1.1
          li Seconds to expire
          li Used by the browser
      li Expires:
        ul
          li HTTP 1.0
          li Date
          li Used by proxies installed during the Roman Empire

  section
    h2 The Refresh button
    ul
      li <b>Refresh (or F5)</b>: a new request will be sent for each file.
        ul
          li Any <b>If-Modified-Since</b> or <b>If-None-Match</b> headers will be sent.
          li The server may return a 304 response.
      li <b>Shift + Refresh (or Ctrl + F5)</b>: a new request will be sent for each file.
        ul
          li Any <b>If-Modified-Since</b> or <b>If-None-Match</b> headers will not be sent.
          li The server cannot return a 304 response.

  section
    h2 And that's all
    ul
      li <b>304 and Expires</b>. That's all you have.
      li Now, <b>which data indicator</b> do you plan to use for caching?
        ul
          li Last modified, MD5 checksum...

  section
    h2 Weak and strong indicators
    ul
      li <b>Weak</b>: The indicator may change even if the file did not.
        ul
          li Last-Modified, default ETag implementations.
      li <b>Strong</b>: The indicator changes only with the resource contents.
        ul
          li MD5, version numbers.
      li Strong indicators can be inserted in the URL or used as ETag.

  section
    h2 Strong indicators
    ul
      li <b>Version numbers</b>
        ul
          li http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js
      li <b>Revision numbers</b>
        ul
          li http://localhost/myentity?id=5&revision=20
      li <b>MD5</b>
        ul
          li http://localhost/images/photo.gif?checksum=9e0bee8ace86b2230140642adcf57c4c

  section
    h2 Expires & strong indicators
    p Using strong indicators, you can set your Expires header to cache forever:

    ul
      li HTTP spec: 1 year
      li Yahoo! recommendation: 10 years

    p.read-block <b>Use only with immutable resources</b>

  section(data-state="lab")
    h2 Lab: Browser Cache
    p Test the browser cache
    